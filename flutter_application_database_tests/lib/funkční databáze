import 'dart:async';
import 'dart:io';
import 'dart:typed_data';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path/path.dart';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';
import 'package:sqflite/sqflite.dart';

class DBHelper {
  late Database _database;
  late String
      _assetsDatabasePath; // Nová proměnná pro uchování cesty k assets databázi

  initializeDB() async {
    WidgetsFlutterBinding.ensureInitialized();
    databaseFactoryOrNull = null;
    databaseFactory = databaseFactoryFfi;
    String databasesPath = await getDatabasesPath();
    String appPath = join(databasesPath, 'database.db');

    _database = await openDatabase(appPath, version: 1,
        onCreate: (Database db, int version) {
      db.execute(
        "CREATE TABLE Notes(id INTEGER AUTOINCREMENT, description TEXT NOT NULL)",
      );
    });

    _assetsDatabasePath = await assetsDB(); // Uložení cesty k assets databázi
    print("Assets Database Path: $_assetsDatabasePath");

    await _database.rawQuery("ATTACH DATABASE '$_assetsDatabasePath' AS DB");
    var result = await _database.query('Notes');
    print("Notes database:$result");
    // var result1 = await _database.query("NutriDatabase");
    // print("TestNotes database:$result1");

    return _database;
  }

  // A method that retrieves all the dogs from the dogs table.
  Future<List<Note>> Notes() async {
    // Get a reference to the database.
    final db = await _database;

    // Query the table for all The Dogs.
  final List<Map<String, dynamic>> maps = await db.rawQuery('''SELECT * FROM Notes
      UNION ALL
      SELECT * FROM TestNotes''');

    // Convert the List<Map<String, dynamic> into a List<Dog>.
    return List.generate(maps.length, (i) {
      return Note(
        id: maps[i]['id'] as int,
        description: maps[i]['description'] as String,
      );
    });
 
  }

  Future<List<Map<String, Object?>>> a() async {
    var joinResult = await _database.rawQuery('''
      SELECT * FROM Notes
      UNION ALL
      SELECT * FROM TestNotes
      
    ''');

    print("vše------------$joinResult");

    var description;
    var id;
    joinResult.forEach((data) {
      description.add(data['description'] as String);
      id.add(data['id'] as int?);
    });

    //List<int> cisla = joinResult.map((data) => data['id'] as int).toList();

    // List<String> description =
    //     joinResult.map((data) => data['description'] as String).toList();
    // print(cisla);
    // print(description);
    return joinResult;
  }

  Future<String> assetsDB() async {
    String databasesPath = await getDatabasesPath();
    String assetsPath = join(databasesPath, "TestNote.db");
    print("Cesta k assets databázi: $assetsPath");

    var exists = await databaseExists(assetsPath);
    print("Ověření existence databáze: $exists");

    if (!exists) {
      print("\nVytváření databáze");
      try {
        await Directory(dirname(assetsPath)).create(recursive: true);
      } catch (_) {}

      ByteData data = await rootBundle.load(join("assets", "TestNote.db"));
      List<int> bytes =
          data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);

      await File(assetsPath).writeAsBytes(bytes, flush: true);
    }

    return assetsPath; // Vracíme cestu k assets databázi (typu String)
  }

  insertItem() async {
    databaseFactoryOrNull = null; //odstraní sql kecy
    final db = await initializeDB();
    await db.execute('''INSERT INTO Notes values("ahoj")''');
  }
}

class Note {
  final int id;
  final String description;

  Note({this.id = -1, required this.description});

  Note.fromMap(Map<String, dynamic> item)
      : id = item["id"],
        description = item["description"];

  Map<String, Object> toMap() {
    return {'id': id, 'description': description};
  }
    @override
  String toString() {
    return 'Dog{id: $id, description: $description}';
  }
}

